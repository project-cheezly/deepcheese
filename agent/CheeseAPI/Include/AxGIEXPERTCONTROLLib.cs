//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

//[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("05/15/2020 15:29:54")]

namespace AxGIEXPERTCONTROLLib
{


    [System.Windows.Forms.AxHost.ClsidAttribute("{961db208-0f2f-41f0-95c8-723633857844}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("ReceiveData")]
    public class AxGiExpertControl : System.Windows.Forms.AxHost
    {

        private GIEXPERTCONTROLLib._DGiExpertControl ocx;

        private AxGiExpertControlEventMulticaster eventMulticaster;

        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;

        public AxGiExpertControl() :
                base("961db208-0f2f-41f0-95c8-723633857844")
        {
            this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
        }

        public event _DGiExpertControlEvents_ReceiveDataEventHandler ReceiveData;

        public event _DGiExpertControlEvents_ReceiveRTDataEventHandler ReceiveRTData;

        public event _DGiExpertControlEvents_ReceiveSysMsgEventHandler ReceiveSysMsg;

        public virtual bool SetSingleData(short index, object data)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSingleData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetSingleData(index, data)));
            return returnValue;
        }

        public virtual bool SetMultiData(short row, short index, object data)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetMultiData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetMultiData(row, index, data)));
            return returnValue;
        }

        public virtual bool SetQueryName(object name)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetQueryName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetQueryName(name)));
            return returnValue;
        }

        public virtual object GetQueryName()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetQueryName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetQueryName()));
            return returnValue;
        }

        public virtual short RequestData()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RequestData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.RequestData()));
            return returnValue;
        }

        public virtual bool RequestRTReg(object type, object code)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("RequestRTReg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.RequestRTReg(type, code)));
            return returnValue;
        }

        public virtual bool UnRequestRTReg(object type, object code)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnRequestRTReg", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.UnRequestRTReg(type, code)));
            return returnValue;
        }

        public virtual object GetSingleData(short index)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSingleData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetSingleData(index)));
            return returnValue;
        }

        public virtual object GetMultiData(short row, short index)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMultiData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetMultiData(row, index)));
            return returnValue;
        }

        public virtual object GetSingleBlockData()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSingleBlockData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetSingleBlockData()));
            return returnValue;
        }

        public virtual object GetMultiBlockData()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMultiBlockData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetMultiBlockData()));
            return returnValue;
        }

        public virtual short GetSingleRowCount()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetSingleRowCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetSingleRowCount()));
            return returnValue;
        }

        public virtual short GetMultiRowCount()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetMultiRowCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetMultiRowCount()));
            return returnValue;
        }

        public virtual short GetErrorState()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetErrorState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetErrorState()));
            return returnValue;
        }

        public virtual object GetErrorCode()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetErrorCode", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetErrorCode()));
            return returnValue;
        }

        public virtual object GetErrorMessage()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetErrorMessage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetErrorMessage()));
            return returnValue;
        }

        public virtual short GetCommState()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCommState", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.GetCommState()));
            return returnValue;
        }

        public virtual bool UnRequestRTRegAll()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("UnRequestRTRegAll", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.UnRequestRTRegAll()));
            return returnValue;
        }

        public virtual void SetRQCount(short nRqCount)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetRQCount", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SetRQCount(nRqCount);
        }

        public virtual void ClearReceiveBuffer()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearReceiveBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.ClearReceiveBuffer();
        }

        public virtual void SelfMemFree(bool bSelfMemFree)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SelfMemFree", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SelfMemFree(bSelfMemFree);
        }

        public virtual bool SetID(object name)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetID", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetID(name)));
            return returnValue;
        }

        public virtual object GetCodeByName(object name)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetCodeByName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetCodeByName(name)));
            return returnValue;
        }

        public virtual bool SetSingleEncData(short index, object data)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SetSingleEncData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.SetSingleEncData(index, data)));
            return returnValue;
        }

        public virtual bool StartIndi(object id, object pswd, object authpswd, object path)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StartIndi", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.StartIndi(id, pswd, authpswd, path)));
            return returnValue;
        }

        public virtual bool CloseIndi()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CloseIndi", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            bool returnValue = ((bool)(this.ocx.CloseIndi()));
            return returnValue;
        }

        public virtual object GetInputSingleData(short rqid, short index)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetInputSingleData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetInputSingleData(rqid, index)));
            return returnValue;
        }

        public virtual object GetInputMultiData(short rqid, short row, short index)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetInputMultiData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetInputMultiData(rqid, row, index)));
            return returnValue;
        }

        public virtual object GetInputTRName(short rqid)
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetInputTRName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.GetInputTRName(rqid)));
            return returnValue;
        }

        public virtual void AboutBox()
        {
            if ((this.ocx == null))
            {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.AboutBox();
        }

        protected override void CreateSink()
        {
            try
            {
                this.eventMulticaster = new AxGiExpertControlEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(GIEXPERTCONTROLLib._DGiExpertControlEvents));
            }
            catch (System.Exception)
            {
            }
        }

        protected override void DetachSink()
        {
            try
            {
                this.cookie.Disconnect();
            }
            catch (System.Exception)
            {
            }
        }

        protected override void AttachInterfaces()
        {
            try
            {
                this.ocx = ((GIEXPERTCONTROLLib._DGiExpertControl)(this.GetOcx()));
            }
            catch (System.Exception)
            {
            }
        }

        internal void RaiseOnReceiveData(object sender, _DGiExpertControlEvents_ReceiveDataEvent e)
        {
            if ((this.ReceiveData != null))
            {
                this.ReceiveData(sender, e);
            }
        }

        internal void RaiseOnReceiveRTData(object sender, _DGiExpertControlEvents_ReceiveRTDataEvent e)
        {
            if ((this.ReceiveRTData != null))
            {
                this.ReceiveRTData(sender, e);
            }
        }

        internal void RaiseOnReceiveSysMsg(object sender, _DGiExpertControlEvents_ReceiveSysMsgEvent e)
        {
            if ((this.ReceiveSysMsg != null))
            {
                this.ReceiveSysMsg(sender, e);
            }
        }
    }

    public delegate void _DGiExpertControlEvents_ReceiveDataEventHandler(object sender, _DGiExpertControlEvents_ReceiveDataEvent e);

    public class _DGiExpertControlEvents_ReceiveDataEvent
    {

        public short rqid;

        public _DGiExpertControlEvents_ReceiveDataEvent(short rqid)
        {
            this.rqid = rqid;
        }
    }

    public delegate void _DGiExpertControlEvents_ReceiveRTDataEventHandler(object sender, _DGiExpertControlEvents_ReceiveRTDataEvent e);

    public class _DGiExpertControlEvents_ReceiveRTDataEvent
    {

        public object rttype;

        public _DGiExpertControlEvents_ReceiveRTDataEvent(object rttype)
        {
            this.rttype = rttype;
        }
    }

    public delegate void _DGiExpertControlEvents_ReceiveSysMsgEventHandler(object sender, _DGiExpertControlEvents_ReceiveSysMsgEvent e);

    public class _DGiExpertControlEvents_ReceiveSysMsgEvent
    {

        public short nMsgID;

        public _DGiExpertControlEvents_ReceiveSysMsgEvent(short nMsgID)
        {
            this.nMsgID = nMsgID;
        }
    }

    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxGiExpertControlEventMulticaster : GIEXPERTCONTROLLib._DGiExpertControlEvents
    {

        private AxGiExpertControl parent;

        public AxGiExpertControlEventMulticaster(AxGiExpertControl parent)
        {
            this.parent = parent;
        }

        public virtual void ReceiveData(short rqid)
        {
            _DGiExpertControlEvents_ReceiveDataEvent receivedataEvent = new _DGiExpertControlEvents_ReceiveDataEvent(rqid);
            this.parent.RaiseOnReceiveData(this.parent, receivedataEvent);
        }

        public virtual void ReceiveRTData(object rttype)
        {
            _DGiExpertControlEvents_ReceiveRTDataEvent receivertdataEvent = new _DGiExpertControlEvents_ReceiveRTDataEvent(rttype);
            this.parent.RaiseOnReceiveRTData(this.parent, receivertdataEvent);
        }

        public virtual void ReceiveSysMsg(short nMsgID)
        {
            _DGiExpertControlEvents_ReceiveSysMsgEvent receivesysmsgEvent = new _DGiExpertControlEvents_ReceiveSysMsgEvent(nMsgID);
            this.parent.RaiseOnReceiveSysMsg(this.parent, receivesysmsgEvent);
        }
    }
}