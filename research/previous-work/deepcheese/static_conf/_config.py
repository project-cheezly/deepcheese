# This file is generated by config/build.py
import dataclasses
import tomllib
import datetime
from ._singleton import Singleton


@dataclasses.dataclass
class Config(metaclass=Singleton):
    @dataclasses.dataclass
    class _DataLoader:
        @dataclasses.dataclass
        class _Lob:
            @dataclasses.dataclass
            class _Indi:
                path: str
                pattern: str

                def __init__(self, skeleton: dict = None):
                    self.path = skeleton.get('path')
                    self.pattern = skeleton.get('pattern')

            @dataclasses.dataclass
            class _Kis:
                path: str
                pattern: str

                def __init__(self, skeleton: dict = None):
                    self.path = skeleton.get('path')
                    self.pattern = skeleton.get('pattern')

            start_time: datetime.time
            end_time: datetime.time
            indi: _Indi
            kis: _Kis

            def __init__(self, skeleton: dict = None):
                self.start_time = skeleton.get('start_time')
                self.end_time = skeleton.get('end_time')
                self.indi = self._Indi(skeleton['indi'])
                self.kis = self._Kis(skeleton['kis'])

        @dataclasses.dataclass
        class _Tr:
            @dataclasses.dataclass
            class _Indi:
                path: str
                pattern: str

                def __init__(self, skeleton: dict = None):
                    self.path = skeleton.get('path')
                    self.pattern = skeleton.get('pattern')

            @dataclasses.dataclass
            class _Kis:
                path: str
                pattern: str

                def __init__(self, skeleton: dict = None):
                    self.path = skeleton.get('path')
                    self.pattern = skeleton.get('pattern')

            indi: _Indi
            kis: _Kis

            def __init__(self, skeleton: dict = None):
                self.indi = self._Indi(skeleton['indi'])
                self.kis = self._Kis(skeleton['kis'])

        lob: _Lob
        tr: _Tr

        def __init__(self, skeleton: dict = None):
            self.lob = self._Lob(skeleton['lob'])
            self.tr = self._Tr(skeleton['tr'])

    @dataclasses.dataclass
    class _Dataset:
        @dataclasses.dataclass
        class _MovingWindow:
            level: int
            time_window: int
            price_window: int
            max_quantity: int
            predict_horizon: int
            cache_dir: str

            def __init__(self, skeleton: dict = None):
                self.level = skeleton.get('level')
                self.time_window = skeleton.get('time_window')
                self.price_window = skeleton.get('price_window')
                self.max_quantity = skeleton.get('max_quantity')
                self.predict_horizon = skeleton.get('predict_horizon')
                self.cache_dir = skeleton.get('cache_dir')

        @dataclasses.dataclass
        class _MultipleMovingWindow:
            @dataclasses.dataclass
            class _Large:
                time_window: int
                price_window: int

                def __init__(self, skeleton: dict = None):
                    self.time_window = skeleton.get('time_window')
                    self.price_window = skeleton.get('price_window')

            @dataclasses.dataclass
            class _Medium:
                time_window: int
                price_window: int

                def __init__(self, skeleton: dict = None):
                    self.time_window = skeleton.get('time_window')
                    self.price_window = skeleton.get('price_window')

            @dataclasses.dataclass
            class _Small:
                time_window: int
                price_window: int

                def __init__(self, skeleton: dict = None):
                    self.time_window = skeleton.get('time_window')
                    self.price_window = skeleton.get('price_window')

            predict_horizon: int
            large: _Large
            medium: _Medium
            small: _Small

            def __init__(self, skeleton: dict = None):
                self.predict_horizon = skeleton.get('predict_horizon')
                self.large = self._Large(skeleton['large'])
                self.medium = self._Medium(skeleton['medium'])
                self.small = self._Small(skeleton['small'])

        @dataclasses.dataclass
        class _MovingWindow3d:
            concat_image_size: int

            def __init__(self, skeleton: dict = None):
                self.concat_image_size = skeleton.get('concat_image_size')

        moving_window: _MovingWindow
        multiple_moving_window: _MultipleMovingWindow
        moving_window_3d: _MovingWindow3d

        def __init__(self, skeleton: dict = None):
            self.moving_window = self._MovingWindow(skeleton['moving_window'])
            self.multiple_moving_window = self._MultipleMovingWindow(skeleton['multiple_moving_window'])
            self.moving_window_3d = self._MovingWindow3d(skeleton['moving_window_3d'])

    @dataclasses.dataclass
    class _Train:
        val_ratio: float
        test_ratio: float

        def __init__(self, skeleton: dict = None):
            self.val_ratio = skeleton.get('val_ratio')
            self.test_ratio = skeleton.get('test_ratio')

    data_loader: _DataLoader
    dataset: _Dataset
    train: _Train

    def __init__(self, skeleton: dict = None):
        self.data_loader = self._DataLoader(skeleton['data_loader'])
        self.dataset = self._Dataset(skeleton['dataset'])
        self.train = self._Train(skeleton['train'])


with open("config.toml") as file:
    _ = Config(tomllib.loads(file.read()))
